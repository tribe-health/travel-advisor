server.port=8080
debug=false
####################################################################################
## Spring 环境选择
####################################################################################
spring.profiles.active=dev

####################################################################################
## Mybatis配置
####################################################################################
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.mapper-locations=classpath*:/mapper/*.xml

####################################################################################
## Travel Advisor 配置
####################################################################################
advisor.priority.countries=CN,HK,MO,MY,JP,KR,IN,ID,TW,DE,US,NZ,AU,PH,SG,TH,GB,VN
advisor.config.timeGapInSecond=300
advisor.config.system.partner=sys

####################################################################################
## Druid 配置
####################################################################################
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-return=false
# 配置初始化时建立物理连接的个数
spring.datasource.druid.initial-size=5
# 配置最小连接池数量
spring.datasource.druid.min-idle=10
# 配置最大连接池数量
spring.datasource.druid.max-active=20
# 配置获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
spring.datasource.druid.keep-alive=true
# 启用连接泄漏监测，用来关闭长时间不使用的连接。配置remove-abandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。
spring.datasource.druid.remove-abandoned=false
# 1800秒，也就是30分钟
spring.datasource.druid.remove-abandoned-timeout=1800
# 关闭abandoned连接时输出错误日志
spring.datasource.druid.log-abandoned=true

# 配置监控统计拦截的filters
spring.datasource.druid.filters=wall,stat,log4j2

##############################
# 配置 StatFilter
##############################
spring.datasource.druid.filter.stat.enabled=true
spring.datasource.druid.filter.stat.log-slow-sql=true
spring.datasource.druid.filter.stat.slow-sql-millis=3000
spring.datasource.druid.filter.stat.merge-sql=true

##############################
# 配置 WallFilter - SQL防火墙
##############################
spring.datasource.druid.filter.wall.enabled=true

##################
### 拦截配置－语句
##################
# 是否允许执行SELECT语句
spring.datasource.druid.filter.wall.config.selelct-allow=true
# 是否允许执行SELECT * FROM T这样的语句。这个选项是防御程序通过调用select *获得数据表的结构信息。
spring.datasource.druid.filter.wall.config.select-all-column-allow=true
# SELECT查询中是否允许INTO字句
spring.datasource.druid.filter.wall.config.select-into-allow=false
# 是否允许执行DELETE语句
spring.datasource.druid.filter.wall.config.delete-allow=false
# 是否允许执行UPDATE语句
spring.datasource.druid.filter.wall.config.update-allow=false
# 是否允许执行INSERT语句
spring.datasource.druid.filter.wall.config.insert-allow=false
# 是否允许执行REPLACE语句
spring.datasource.druid.filter.wall.config.replace-allow=false
# 是否允许执行MERGE语句，这个只在Oracle中有用
spring.datasource.druid.filter.wall.config.merge-allow=false
# 是否允许通过jdbc的call语法调用存储过程
spring.datasource.druid.filter.wall.config.call-allow=false
# 是否允许使用SET语法
spring.datasource.druid.filter.wall.config.set-allow=false
# truncate语句是危险，缺省打开，若需要自行关闭
spring.datasource.druid.filter.wall.config.truncate-allow=false
# 是否允许创建表
spring.datasource.druid.filter.wall.config.create-table-allow=false
# 是否允许执行Alter Table语句
spring.datasource.druid.filter.wall.config.alter-table-allow=false
# 是否允许删除表
spring.datasource.druid.filter.wall.config.drop-table-allow=false
# 是否允许语句中存在注释，Oracle的用户不用担心，Wall能够识别hints和注释的区别
spring.datasource.druid.filter.wall.config.comment-allow=false
# 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
spring.datasource.druid.filter.wall.config.none-base-statement-allow=false
# 是否允许一次执行多条语句，缺省关闭
spring.datasource.druid.filter.wall.config.multi-statement-allow=false
# 是否允许执行mysql的use语句，缺省打开
spring.datasource.druid.filter.wall.config.use-allow=true
# 是否允许执行mysql的describe语句，缺省打开
spring.datasource.druid.filter.wall.config.describe-allow=false
# 是否允许执行mysql的show语句，缺省打开
spring.datasource.druid.filter.wall.config.show-allow=false
# 是否允许执行commit操作
spring.datasource.druid.filter.wall.config.commit-allow=true
# 是否允许执行roll back操作
spring.datasource.druid.filter.wall.config.rollback-allow=true

####################
### 禁用对象检测配置
####################
# 检测是否使用了禁用的表，默认true
spring.datasource.druid.filter.wall.config.table-check=true
# 检测是否使用了禁用的Schema，默认true
spring.datasource.druid.filter.wall.config.schema-check=true
# 检测是否使用了禁用的函数，默认true
spring.datasource.druid.filter.wall.config.function-check=true
# 检测是否使用了“禁用对对象”，默认true
spring.datasource.druid.filter.wall.config.object-check=true
# 检测是否使用了“禁用的变量”，默认true
spring.datasource.druid.filter.wall.config.variant-check=true
# 指定的表只读，不能够在SELECT INTO、DELETE、UPDATE、INSERT、MERGE中作为"被修改表"出现
spring.datasource.druid.filter.wall.config.read-only-tables=
# 检查SELECT语句的WHERE子句是否是一个永真条件，默认true

######################
### 拦截配置－永真条件
######################
spring.datasource.druid.filter.wall.config.select-where-alway-true-check=true
# 检查SELECT语句的HAVING子句是否是一个永真条件，默认true
spring.datasource.druid.filter.wall.config.select-having-alway-true-check=true
# 检查DELETE语句的WHERE子句是否是一个永真条件，默认true
spring.datasource.druid.filter.wall.config.delete-where-alway-true-check=true
# 检查DELETE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险，默认false
spring.datasource.druid.filter.wall.config.delete-where-none-check=false
# 检查UPDATE语句的WHERE子句是否是一个永真条件，默认true
spring.datasource.druid.filter.wall.config.update-where-alay-true-check=true
# 检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险，默认false
spring.datasource.druid.filter.wall.config.update-where-none-check=false
# 检查查询条件(WHERE/HAVING子句)中是否包含AND永真条件，默认false
spring.datasource.druid.filter.wall.config.condition-and-alway-true-allow=true
# 检查查询条件(WHERE/HAVING子句)中是否包含AND永假条件，默认false
spring.datasource.druid.filter.wall.config.condition-and-alway-false-allow=false
# 检查查询条件(WHERE/HAVING子句)中是否包含LIKE永真条件，默认true
spring.datasource.druid.filter.wall.config.condition-like-true-allow=true

######################
### 其他拦截配置
######################
# SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
spring.datasource.druid.filter.wall.config.select-into-outfile-allow=false
# 检测SELECT UNION，默认true
spring.datasource.druid.filter.wall.config.select-union-check=true
# 检测SELECT MINUS，默认true
spring.datasource.druid.filter.wall.config.select-minus-check=true
# 检测SELECT EXCEPT，默认true
spring.datasource.druid.filter.wall.config.select-except-check=true
# 检测SELECT INTERSECT，默认true
spring.datasource.druid.filter.wall.config.select-intersect-check=true
# 是否必须参数化，如果为True，则不允许类似WHERE ID = 1这种不参数化的SQL，默认false
spring.datasource.druid.filter.wall.config.must-parameterized=false
# 是否进行严格的语法检测，Druid SQL Parser在某些场景不能覆盖所有的SQL语法，出现解析SQL出错，可以临时把这个选项设置为false，同时把SQL反馈给Druid的开发者。
spring.datasource.druid.filter.wall.config.strict-syntax-check=true
# 查询条件中是否允许有XOR条件。XOR不常用，很难判断永真或者永假，缺省不允许。
spring.datasource.druid.filter.wall.config.condition-op-xor-allow=false
# 查询条件中是否允许有"&"、"~"、"|"、"^"运算符。
spring.datasource.druid.filter.wall.config.condition-op-bitwse-allow=true
# 查询条件中是否允许连续两个常量运算表达式
spring.datasource.druid.filter.wall.config.condition-double-const-allow=false
# 是否允许SELECT * FROM A MINUS SELECT * FROM B这样的语句，默认true
spring.datasource.druid.filter.wall.config.minus-allow=true
# 是否允许SELECT * FROM A INTERSECT SELECT * FROM B这样的语句，默认true
spring.datasource.druid.filter.wall.config.intersect-allow=true
# 拦截常量运算的条件，比如说WHERE FID = 3 - 1，其中"3 - 1"是常量运算表达式。默认true
spring.datasource.druid.filter.wall.config.const-arithmetic-allow=true
# 是否允许limit 0这样的语句。默认false
spring.datasource.druid.filter.wall.config.limit-zero-allow=false


# 对被认为是攻击的SQL进行LOG.error输出
spring.datasource.druid.filter.wall.log-violation=true
# 对被认为是攻击的SQL抛出SQLException
spring.datasource.druid.filter.wall.throw-exception=true

##############################
# 配置 DruidWebStatFilter
##############################
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.web-stat-filter.session-stat-enable=true
spring.datasource.druid.web-stat-filter.session-stat-max-count=10

##############################
# 配置 DruidStatViewServlet
##############################
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
# IP 白名单，没有配置或者为空，则允许所有访问。支持子网掩码 /16 /24 /32等。多个IP用逗号相隔
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
# IP 黑名单，若白名单也存在，则优先使用
#spring.datasource.druid.stat-view-servlet.deny=x.x.x.x
# 禁用 HTML 中 Reset All 按钮
spring.datasource.druid.stat-view-servlet.reset-enable=false
# 登录用户名/密码
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=admin

##############################
# 配置 DruidStatInterceptor
##############################
spring.datasource.druid.aop-patterns=com.benny.traveladvisor.dao.*, com.benny.traveladvisor.service.*




